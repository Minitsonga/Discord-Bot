<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">


    <link rel="stylesheet" href="/css/dashboard.css">
    <link rel="stylesheet" href="/css/guild_Dashboard.css">
    <link rel="stylesheet" href="/css/sidebars.css">
    <link rel="stylesheet" href="/css/switchBtn.css">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/monolith.min.css" />
    <!-- 'monolith' theme -->




    <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.5.0/css/flag-icon.min.css"
        integrity="sha512-Cv93isQdFwaKBV+Z4X8kaVBYWHST58Xb/jVOcV9aRsGSArZsgAnFIhMpDoMDcFNoUtday1hdjn0nGp3+KZyyFw=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <link rel="stylesheet" href="/css/multi-select.css">

    <script src="https://kit.fontawesome.com/dead68bbd8.js" crossorigin="anonymous"></script>

    <link rel="icon" href="img/Bot.jpg" type="image/icon type">
    <title>Secrétaire</title>

</head>

<body>
    <%- include("../templates/svgIcons") -%>

        <!--MAIN BODY-->
        <%- include("../templates/sidebarPlugins") -%>
            <section class="home-section">
                <h1 class="ps-3 pt-4 pb-5">Plugins</h1>
                <section class="stats">
                    <div class="container py-4">
                        <header class="pb-3 mb-4 border-bottom">
                            <div class="d-flex align-items-center text-white text-decoration-none">
                                <svg class="bi me-4" width="3em" height="3em">
                                    <use xlink:href="#trophy" />
                                </svg>
                                <span class="fs-1">Level and Rank</span>
                                <div class="ms-auto">
                                    <label class="switch" id="togBtn">
                                        <input type="checkbox" onclick="toggle()" id="switch">
                                        <span class="slider round"></span>
                                    </label>
                                </div>
                            </div>
                        </header>
                        <p>Gagnez de l'experience en parlant dans le serveur. </p>
                        <div class="p-4 mb-4 bg-purple rounded-3">
                            <div class="container-fluid">
                                <div class="d-flex flex-column">
                                    <h4><b>Salons et rôles ignorés</b></h4>
                                    <p class="descriptionOptions">Indiquez les salons et les rôles pour lesquels le gain
                                        d'XP ne sera pas possible.
                                    </p>
                                    <div class="row mb-4">
                                        <div class="col mb-3">
                                            <div class="select-title">Salons ignorés </div>
                                            <select id="salonIgnore" style="display: none;">
                                                <% guildStats.channels.forEach(channel=> {%>
                                                    <% if(channel.type=='GUILD_TEXT' ){ %>
                                                        <%- include('../templates/textChannelList', {channel}) -%>
                                                            <% }%>
                                                                <%})%>
                                            </select>
                                            <p id="warning-salonIgnore-select" style="display: none; ">Attention ! Rien
                                                est indiqué.
                                                <br>Tous les membres du serveur auront accès aux commandes
                                            </p>
                                        </div>
                                        <div class="col">

                                            <div class="select-title">Roles ignorés</div>
                                            <select id="rolesIgnore" style="display: none; ">
                                                <% guildStats.guildRoles.forEach(role=> { %>
                                                    <%- include('../templates/rolesList', {role}) -%>
                                                        <%})%>
                                            </select>
                                            <p id="warning-rolesIgnore-select" style="display: none; ">Attention ! Rien
                                                est
                                                indiqué.
                                                Aucun role ne sera ignoré.</p>
                                        </div>
                                    </div>
                                    <hr>
                                    <h4><b>Annonce Level up</b></h4>
                                    <p class="descriptionOptions">Message automatique lorsqu'un membre du serveur passe
                                        au niveau supérieur.
                                    </p>

                                    <div class="d-flex bg-purple-normal p-1 m-auto mt-2 mb-4 choice-type-channel-holder"
                                        style="width: 370px; border-radius: 5px;">
                                        <button class="btn btn-purple-normal choice-type-channel m-auto"
                                            id="currentChannel">Current Channel

                                        </button>
                                        <button class="btn btn-purple-normal choice-type-channel m-auto"
                                            id="customChannel">Custom Channel</button>
                                    </div>

                                    <div class="row mb-4 used" id="currentChannelDetails">
                                        <div class="col m-auto">
                                            <h6>Les messages de level up se feront dans le salon dans lequel le membre a
                                                parlé</h6>
                                        </div>
                                        <div class="col mb-3">
                                            <div class="select-title">Message d'Annonce</div>
                                            <% if(levelingUpMessage){ %>
                                                <textarea class="auto-text" name="message" id="message"
                                                    style="width: 400px; height: 80px;"><%= levelingUpMessage%></textarea>
                                                <% }else {%>
                                                    <textarea class="auto-text" name="message" id="message"
                                                        style="width: 400px; height: 80px;">Bravo {user} ! Tu as atteint le niveau {level}</textarea>
                                                    <%}%>

                                                        <p id="error-message" style="display: none;">Au moins 1
                                                            caractère est requis
                                                        </p>
                                                        <a id="infoButtonTextArea" title='Info about "{element}"'>
                                                            <svg class="bi" width="1.2em" height="1.2em">
                                                                <use xlink:href="#info-circle" />
                                                            </svg>
                                                        </a>
                                        </div>
                                    </div>
                                    <div class="row mb-4" id="customChannelDetails" style="display: none;">
                                        <div class="col">
                                            <div class="select-title">Salon d'annonce de Level Up</div>
                                            <div class="custom-select" style="width: 350px;">
                                                <select id="salonAnnonce" style="display: none; ">
                                                    <% if(!levelingUpChannelID || levelingUpChannelID==='undefined' ){
                                                        %>
                                                        <option value='undefined' disabled selected hidden> Selectionner
                                                            un
                                                            salon...
                                                        </option>
                                                        <% }%>
                                                            <% guildStats.channels.forEach(channel=> { %>
                                                                <% if(channel.id===levelingUpChannelID){ %>
                                                                    <option value='<%= levelingUpChannelID %>' selected
                                                                        hidden>
                                                                        # <%- channel.name -%>
                                                                    </option>

                                                                    <% }%>
                                                                        <%})%>
                                                                            <% guildStats.channels.forEach(channel=> {%>
                                                                                <% if(channel.type=='GUILD_TEXT' ){ %>
                                                                                    <%- include('../templates/textChannelList',
                                                                                        {channel}) -%>
                                                                                        <% }%>
                                                                                            <%})%>
                                                </select>

                                            </div>
                                            <p id="error-auto-select" style="display: none; ">Champ obligatoire</p>
                                        </div>
                                        <div class="col mb-3">
                                            <div class="select-title">Message d'Annonce</div>
                                            <% if(levelingUpMessage){ %>
                                                <textarea class="auto-text" name="message" id="message"
                                                    style="width: 400px; height: 80px;"><%= levelingUpMessage%></textarea>
                                                <% }else {%>
                                                    <textarea class="auto-text" name="message" id="message"
                                                        style="width: 400px; height: 80px;">Bravo {user} ! Tu as atteint le niveau {level}</textarea>
                                                    <%}%>

                                                        <p id="error-message" style="display: none;">Au moins 1
                                                            caractère est requis
                                                        </p>

                                                        <a id="infoButtonTextArea" title='Info about "{element}"'>
                                                            <svg class="bi" width="1.2em" height="1.2em">
                                                                <use xlink:href="#info-circle" />
                                                            </svg>
                                                        </a>
                                        </div>
                                    </div>
                                    <hr>
                                    <h4><b>Gestion des commandes</b></h4>
                                    <p class="descriptionOptions">Indiquez le salon où les commandes pourront être
                                        utilisées.
                                    </p>
                                    <div class="row mb-4 " id="customChannelDetails">
                                        <div class="col">
                                            <div class="select-title">Salon permettant d'utiliser les commandes</div>
                                            <div class="custom-select" style="width: 350px;">
                                                <select aria-label="Channel Selector" id='cmd_Channel_ID'
                                                    name="cmd_Channel_ID">
                                                    <% if(!cmdLevelingChannelID || cmdLevelingChannelID==='undefined' ){
                                                        %>
                                                        <option value='undefined' disabled selected hidden> Selectionner
                                                            un
                                                            salon...
                                                        </option>
                                                        <% }%>
                                                            <% guildStats.channels.forEach(channel=> { %>
                                                                <% if(channel.id===cmdLevelingChannelID){ %>
                                                                    <option value='<%= cmdLevelingChannelID %>' selected
                                                                        hidden>
                                                                        # <%- channel.name -%>
                                                                    </option>

                                                                    <% }%>
                                                                        <%})%>
                                                                            <% guildStats.channels.forEach(channel=> {%>
                                                                                <% if(channel.type=='GUILD_TEXT' ){ %>
                                                                                    <%- include('../templates/textChannelList',
                                                                                        {channel}) -%>
                                                                                        <% }%>
                                                                                            <%})%>
                                                </select>

                                            </div>
                                            <p id="error-cmd-select" style="display: none; ">Champ obligatoire</p>

                                        </div>
                                    </div>
                                    <hr>
                                    <h4><b>Bannière de Rank</b></h4>
                                    <p class="descriptionOptions">Paramètrez la bannière par defaut que tous les membres
                                        auront. Chaque membre
                                        pourra la personnalisé de son coté.
                                    </p>
                                    <div class="row mb-3">
                                        <div class="col mb-4">
                                            <h6>Vous pouvez personnaliser la bannière en changeant la couleur ou même
                                                l'image
                                                de fond !</h6>
                                            <div class="color-picker"></div>
                                        </div>

                                        <div class="col">
                                            <svg version="1.1" xmlns="http://www.w3.org/2000/svg"
                                                xmlns:xlink="http://www.w3.org/1999/xlink" width="440px" height="150px">

                                                <rect id="rect" width="100%" height="100%" rx="3" ry="3"
                                                    style="fill:#23272A;"></rect>
                                                <!-- Rounded rectangle in the center -->
                                                <rect x="10" y="10" rx="3" ry="3" width="420px" height="130px"
                                                    style="fill:black;opacity:0.75;"></rect>
                                                <!-- === Avatar. ===
                                                         Radius of circle = rc = 40px
                                                         Width of circle = height of circle = rc * 2 = 80px
                                                         margin left of avatar = mla = 21px
                                                         margin top of avatar = mta = 31px -->
                                                <!-- Border of avatar.
                                                         This border is made by a frame that is bigger than the avatar and behind it
                                                         centered at the same point.
                                                
                                                         Width of border = wb = 4px
                                                         Radius of border = rb = rc + wb/2 = 42px
                                                          
                                                        -->

                                                <clipPath id="clipCircle">
                                                    <!-- cx = mla + r = 21 + 40 = 61
                                                                 cy = mta + r = 31 + 40 = 71 -->
                                                    <circle r="19" cx="220" cy="35"></circle>
                                                    <circle r="38" cx="65" cy="75"></circle>
                                                </clipPath>

                                                <circle r="20" cx="220" cy="35" style="fill: rgb(255, 255, 255);">
                                                </circle>

                                                <circle r="40" cx="65" cy="75" style="fill: rgb(255, 255, 255);">
                                                </circle>


                                                <image x="25" y="35" width="80" height="80" clip-path="url(#clipCircle)"
                                                    xlink:href="https://cdn.discordapp.com/avatars/<%= user.discordId %>/<%= user.avatar %>.png">
                                                </image>
                                                <image x="200" y="16" width="40" height="40"
                                                    clip-path="url(#clipCircle)"
                                                    xlink:href="https://cdn.discordapp.com/icons/<%= guild.id%>/<%= guild.icon %>.png">
                                                </image>


                                                <!-- Rank and level -->
                                                <text x="310" y="35" font-size="20" text-anchor="middle"
                                                    style="stroke: black; stroke-width: 0.3px">
                                                    <tspan class="font-calibri" fill="white">
                                                        RANK
                                                    </tspan>
                                                </text>
                                                <text x="310" y="65" font-size="25" text-anchor="middle">
                                                    <tspan class="font-calibri" fill="white" id="rankUser">
                                                        #1
                                                    </tspan>

                                                </text>

                                                <text x="380" y="35" font-size="20" text-anchor="middle"
                                                    style="stroke: black; stroke-width: 0.3px">
                                                    <tspan class="font-calibri" fill="white">
                                                        LEVEL
                                                    </tspan>

                                                </text>
                                                <text x="380" y="65" font-calibri font-size="30" text-anchor="middle"
                                                    style="font-weight: bold;">
                                                    <tspan class="custom-color-card font-calibri" style="fill: #0073ff"
                                                        id="levelUser">
                                                        1
                                                    </tspan>

                                                </text>


                                                <!-- Username + tag -->
                                                <text x="130" y="100" class="font-calibri" font-size="20" fill="white">
                                                    <%= user.username%>
                                                </text>


                                                <!-- === Progress bar === -->
                                                <!-- simulate an outer stroke -->
                                                <rect x="123" y="107.5" rx="11" ry="11" width="285" height="20"
                                                    style="fill:black;"></rect>
                                                <!-- background color of progress bar-->
                                                <rect x="125" y="110" rx="9" ry="9" width="280" height="15"
                                                    style="fill:#424242;"></rect>


                                                <!-- actual progress bar.
                                                         be careful when computing width: full width is 316px.
                                                         Minimum width should be either 0px or 18px for better looking because of border radius -->
                                                <rect x="125" y="110" rx="9" ry="9" width="140" height="15"
                                                    class="custom-color-card" style="fill:#0073ff;"></rect>

                                                <!-- Exp points -->
                                                <text x="275" y="123" font-family="Calibri" font-size="15" fill="white"
                                                    text-anchor="middle">
                                                    <tspan class="font-calibri">
                                                        50 / 100 XP
                                                    </tspan>
                                                </text>

                                            </svg>
                                        </div>
                                    </div>
                                    <div class="align-items-center mx-auto pt-4">
                                        <button type="submit" id="save" style="outline: none;" class="btn btn-bg-other">
                                            <span>Enregistrer</span>
                                            <div class="loader" id="loader-spinner" style="display: none;"></div>
                                        </button>

                                    </div>

                                </div>

                            </div>

                        </div>

                        <div class="p-4 mb-4 bg-purple rounded-3">
                            <div class="container-fluid">
                                <div class="d-flex flex-column">
                                    <h4><b>Commandes</b></h4>
                                    <% guildStats.commandsCategoryPerms.forEach(element=> { %>
                                        <% if(element.category==='leveling' ) { %>
                                            <% element.commands.forEach(cmd=> { %>
                                                <% let name=cmd.name;%>
                                                    <% let description=cmd.description;%>
                                                        <% let count=0;%>
                                                            <% if(cmd.options.length> 0) {%>
                                                                <% cmd.options.forEach(subCommand=> {%>
                                                                    <%if(subCommand.type=="1" ){ %>
                                                                        <%name=cmd.name + " " + subCommand.name;%>
                                                                            <%description=subCommand.description;%>
                                                                                <%- include('../templates/commandsList',
                                                                                    {name, description})-%>
                                                                                    <%}else{%>
                                                                                        <%count++%>
                                                                                            <% }%>
                                                                                                <%})%>
                                                                                                    <% if( count>=
                                                                                                        cmd.options.length)
                                                                                                        {%>
                                                                                                        <%- include('../templates/commandsList',
                                                                                                            {name,
                                                                                                            description})-%>
                                                                                                            <% }%>
                                                                                                                <%}else{%>
                                                                                                                    <%- include('../templates/commandsList',
                                                                                                                        {name,
                                                                                                                        description})-%>
                                                                                                                        <%
                                                                                                                            }%>

                                                                                                                            <%})%>
                                                                                                                                <%}%>
                                                                                                                                    <%})%>
                                </div>

                            </div>
                        </div>


                    </div>
                </section>



            </section>

            <div class="container p-4 bg-purple-normal rounded-3 apply-btn-holder" id="helpTextArea"
                style="width: auto;">
                <div class="apply-btn-inside text-white flex-column">
                    <p>{user} -> Mentionner avec @ l'utilisateur</p>
                    <p>{username} -> Affiche l'username de l'utilisateur</p>
                    <p>{server} -> Affiche le nom du serveur</p>
                    <p>{level} -> Affiche le niveau de l'utilisateur</p>
                    <div class="d-flex justify-content-center">
                        <a class="btn bg-purple-animation text-white ms-3" id="validInfo">Ok</a>
                    </div>

                </div>
            </div>

            <div class="container p-4 bg-purple-normal rounded-3 apply-btn-holder" id="holderPluginDesactivation"
                style="width: auto;">
                <div class="apply-btn-inside text-white flex-column">
                    <strong style="font-size: 20px;">Attention !</strong>
                    <br>
                    <p>Voulez vous vraiment désactiver le plugin ?</p>
                    <div class="flex-row">
                        <a href="#" class="btn bg-outline-lighter me-3" id="desabledPlugin">
                            <span>Désactiver</span>
                            <div class="loader" id="loader-spinner-popup" style="display: none;"></div>
                        </a>
                        <a type="submit" class="btn bg-purple-animation text-white ms-3"
                            id="cancelDesactivateBtn">Annuler</a>
                    </div>

                </div>
            </div>

            <div id="overlay"></div>



            <script src="/js/desactivatePlugin.js"></script>

            <script>
                desabledPlugin.addEventListener("click", () => {

                    document.getElementById("loader-spinner-popup").previousElementSibling.style.display = "none";
                    document.getElementById("loader-spinner-popup").style.display = "block";
                    let data = { plugin: plugin.checked };

                    fetch("leveling", {
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        method: "POST",
                        body: JSON.stringify(data)
                    }).then((res) => {
                        console.log("done", res);
                        document.getElementById("loader-spinner-popup").style.display = "none";
                        document.getElementById("loader-spinner-popup").previousElementSibling.removeAttribute("style");
                        closePopUp(desabledPluginPopUpHolder);
                    });
                })

            </script>


            <script>

                function toggle() {
                    if (document.getElementById("switch").checked) {

                        document.getElementById("leveling-plugin").style.color = '#089402';
                        console.log('activated');
                        document.getElementById("save").removeAttribute("style");

                    }
                    else {
                        document.getElementById("save").style.display = "none";
                        openPopUp(desabledPluginPopUpHolder);
                        document.getElementById("leveling-plugin").style.color = '#646464';
                    }
                }


            </script>

            <!-- Modern or es5 bundle -->
            <script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.min.js"></script>

            <script src="/js/multi-select-min.js"></script>

            <script>
                let hexaColor = "<%= levelingDefaultColor %>";
                const changableColor = document.querySelectorAll(".custom-color-card");

                changableColor.forEach(element => {
                    element.style.fill = hexaColor;
                })
                // Simple example, see optional options for more configuration.
                const pickr = Pickr.create({
                    el: '.color-picker',
                    theme: 'monolith', // or 'monolith', or 'nano', or'classic
                    default: hexaColor,
                    swatches: [
                        'rgba(244, 67, 54, 1)',
                        'rgba(233, 30, 99, 1)',
                        'rgba(156, 39, 176, 1)',
                        'rgba(103, 58, 183, 1)',
                        'rgba(63, 81, 181, 1)',
                        'rgba(33, 150, 243, 1)',
                        'rgba(3, 169, 244, 1)',
                        'rgba(0, 188, 212, 1)',
                        'rgba(0, 150, 136, 1)',
                        'rgba(76, 175, 80, 1)',
                        'rgba(139, 195, 74, 1)',
                        'rgba(205, 220, 57, 1)',
                        'rgba(255, 235, 59, 1)',
                        'rgba(255, 193, 7, 1)'
                    ],

                    components: {

                        // Main components
                        preview: true,
                        opacity: false,
                        hue: true,

                        // Input / output Options
                        interaction: {
                            hex: true,
                            rgb: false,
                            hsla: false,
                            hsva: false,
                            cmyk: false,
                            input: true,
                            clear: false,
                            save: false
                        }
                    }
                });

                pickr.on('change', (color, instance) => {
                    hexaColor = color.toHEXA().toString();
                    changableColor.forEach(element => {
                        element.style.fill = hexaColor;
                    })

                });

                const pcrButton = document.querySelector(".pcr-button")
                const pcr_app = document.querySelector(".pcr-app")
                const lastColorButton = document.querySelector(".pcr-last-color");
                lastColorButton.addEventListener("click", () => {
                    hexaColor = "<%= levelingDefaultColor %>";
                    changableColor.forEach(element => {
                        element.style.fill = hexaColor;
                    })
                })

                console.log(pcrButton)

                pcrButton.setAttribute("class", "btn btn-purple-lighter mt-3");
                pcrButton.style.color = "white";
                pcrButton.style.boxShadow = "none";
                pcrButton.innerHTML = "Modifier ma couleur";
            </script>


            <script>
                const currentChannel = document.querySelector("#currentChannel");
                const customChannel = document.querySelector("#customChannel");
                const currentChannelDetails = document.querySelector("#currentChannelDetails");
                const customChannelDetails = document.querySelector("#customChannelDetails");

                if ("<%= levelingUpChannelID %>" === '' || "<%= levelingUpChannelID %>" === 'undefined') {
                    customChannel.classList.remove("active")
                    currentChannel.classList.add("active")

                    currentChannelDetails.removeAttribute("style");
                    customChannelDetails.style.display = "none";

                }
                else {
                    currentChannel.classList.remove("active")
                    customChannel.classList.add("active")

                    currentChannelDetails.style.display = "none";
                    customChannelDetails.removeAttribute("style");
                }

                currentChannel.addEventListener("click", () => {
                    customChannel.classList.remove("active")
                    currentChannel.classList.add("active")

                    currentChannelDetails.removeAttribute("style");
                    customChannelDetails.style.display = "none";


                })

                customChannel.addEventListener("click", () => {
                    currentChannel.classList.remove("active")
                    customChannel.classList.add("active")

                    currentChannelDetails.style.display = "none";
                    customChannelDetails.removeAttribute("style");
                })


            </script>

            <script>
                var x, i, j, l, ll, selElmnt, a, b, c;
                /* Look for any elements with the class "custom-select": */
                x = document.getElementsByClassName("custom-select");
                l = x.length;
                for (i = 0; i < l; i++) {
                    selElmnt = x[i].getElementsByTagName("select")[0];
                    ll = selElmnt.length;
                    /* For each element, create a new DIV that will act as the selected item: */
                    a = document.createElement("DIV");
                    a.setAttribute("class", "select-selected");
                    a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
                    x[i].appendChild(a);
                    /* For each element, create a new DIV that will contain the option list: */
                    b = document.createElement("DIV");
                    b.setAttribute("class", "select-items select-hide");
                    for (j = 1; j < ll; j++) {
                        /* For each option in the original select element,
                        create a new DIV that will act as an option item: */
                        c = document.createElement("DIV");
                        c.innerHTML = selElmnt.options[j].innerHTML;
                        c.addEventListener("click", function (e) {
                            /* When an item is clicked, update the original select box,
                            and the selected item: */
                            var y, i, k, s, h, sl, yl;
                            s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                            sl = s.length;
                            h = this.parentNode.previousSibling;
                            for (i = 0; i < sl; i++) {
                                if (s.options[i].innerHTML == this.innerHTML) {
                                    s.selectedIndex = i;
                                    h.innerHTML = this.innerHTML;
                                    y = this.parentNode.getElementsByClassName("same-as-selected");
                                    yl = y.length;
                                    for (k = 0; k < yl; k++) {
                                        y[k].removeAttribute("class");
                                    }
                                    this.setAttribute("class", "same-as-selected");
                                    break;
                                }
                            }
                            h.click();
                        });
                        b.appendChild(c);
                    }
                    x[i].appendChild(b);
                    a.addEventListener("click", function (e) {
                        /* When the select box is clicked, close any other select boxes,
                        and open/close the current select box: */
                        e.stopPropagation();
                        closeAllSelect(this);
                        this.nextSibling.classList.toggle("select-hide");
                        this.classList.toggle("select-arrow-active");
                    });
                }

                function closeAllSelect(elmnt) {
                    /* A function that will close all select boxes in the document,
                    except the current select box: */
                    var x, y, i, xl, yl, arrNo = [];
                    x = document.getElementsByClassName("select-items");
                    y = document.getElementsByClassName("select-selected");
                    xl = x.length;
                    yl = y.length;
                    for (i = 0; i < yl; i++) {
                        if (elmnt == y[i]) {
                            arrNo.push(i)
                        } else {
                            y[i].classList.remove("select-arrow-active");
                        }
                    }
                    for (i = 0; i < xl; i++) {
                        if (arrNo.indexOf(i)) {
                            x[i].classList.add("select-hide");
                        }
                    }
                }

                /* If the user clicks anywhere outside the select box,
                then close all select boxes: */
                document.addEventListener("click", closeAllSelect);
            </script>

            <script>
                const salonsIgnored = [];
                const rolesIgnored = [];
                var multiSelectAllow = new IconicMultiSelect({

                    select: "#salonIgnore",
                    placeholder: "Selectionner un ou des roles...",
                    // message to show if no data
                    noData: "No data found. ",
                    // message to show if no results
                    noResults: "No results found.",

                })
                multiSelectAllow.init();

                multiSelectAllow.subscribe(function (e) {
                    const { action } = e;

                    if (e.selection.length >= 1) var { text, value } = e.selection[e.selection.length - 1];

                    if (action === "ADD_OPTION") {

                        let count = 0;
                        rolesIgnored.forEach((role) => {
                            if (role.id === e.selection[e.selection.length - 1].value) {
                                window.alert("Vous ne pouvez pas utiliser ce rôle car il est déjà dans une autre liste \n Le role ne sera pas prit en compte");


                            }
                            else {
                                count++;
                            }
                        })

                        if (count >= rolesIgnored.length) salonsIgnored.push({ name: text, id: value });

                        const listOptions = document.getElementsByClassName("multiselect__container")[1].lastElementChild.children[0].children

                        for (let i = 0; i < listOptions.length; i++) {
                            salonsIgnored.forEach((role) => {
                                if (role.id === listOptions[i].dataset.value) {
                                    listOptions[i].style.display = "none";
                                    console.log("enleve", listOptions[i]);
                                }

                            })
                        }


                    }
                    else if (action === "REMOVE_OPTION") {

                        let roleID_Deleted = salonsIgnored.find(role => role.id === e.value);
                        console.log(roleID_Deleted)
                        var index = salonsIgnored.indexOf(roleID_Deleted);
                        if (index !== -1) {
                            salonsIgnored.splice(index, 1);
                        }

                        const listOptions = document.getElementsByClassName("multiselect__container")[1].lastElementChild.children[0].children

                        for (let i = 0; i < listOptions.length; i++) {
                            if (e.value === listOptions[i].dataset.value) {
                                listOptions[i].removeAttribute("style");
                                console.log("rajoute", listOptions[i]);
                            }

                        }


                    }

                    console.log(e);
                    console.log(salonsIgnored);
                });

            </script>

            <script>

                var multiSelectDeny = new IconicMultiSelect({

                    select: "#rolesIgnore",
                    placeholder: "Selectionner un ou des roles...",
                    // message to show if no data
                    noData: "No data found. ",
                    // message to show if no results
                    noResults: "No results found.",

                })
                multiSelectDeny.init();

                multiSelectDeny.subscribe(function (e) {
                    const { action } = e;

                    // get [1] pour deny . lastelementChild .children [0] .children .foreach .attributes[0].nodeValue
                    // get [1] pour deny . lastelementChild .children [0] .children .foreach .dataset[0].value
                    if (e.selection.length >= 1) var { text, value } = e.selection[e.selection.length - 1];

                    if (action === "ADD_OPTION") {
                        let count = 0;
                        salonsIgnored.forEach((role) => {
                            if (role.id === e.selection[e.selection.length - 1].value) {
                                window.alert("Vous ne pouvez pas utiliser ce rôle car il est déjà dans une autre liste \n Le role ne sera pas prit en compte");


                            }
                            else {
                                count++;
                            }
                        })

                        if (count >= salonsIgnored.length) rolesIgnored.push({ name: text, id: value });

                        const listOptions = document.getElementsByClassName("multiselect__container")[0].lastElementChild.children[0].children

                        for (let i = 0; i < listOptions.length; i++) {

                            let count = 0;
                            rolesIgnored.forEach((role) => {
                                if (role.id === listOptions[i].dataset.value) {
                                    listOptions[i].style.display = "none";
                                    console.log("enleve", listOptions[i]);
                                }
                            })

                        }

                    }
                    else if (action === "REMOVE_OPTION") {

                        let roleID_Deleted = rolesIgnored.find(role => role.id === e.value);
                        console.log(roleID_Deleted)
                        var index = rolesIgnored.indexOf(roleID_Deleted);
                        if (index !== -1) {
                            rolesIgnored.splice(index, 1);
                        }

                        const listOptions = document.getElementsByClassName("multiselect__container")[0].lastElementChild.children[0].children

                        for (let i = 0; i < listOptions.length; i++) {
                            if (e.value === listOptions[i].dataset.value) {
                                listOptions[i].removeAttribute("style");
                                console.log("rajoute", listOptions[i]);
                            }

                        }

                    }

                    console.log(e);
                    console.log(rolesIgnored);
                });

            </script>



            <script>

                const saveBtn = document.querySelector("#save");
                const cmdChannel = document.querySelector("#cmd_Channel_ID");
                const autoChannel = document.querySelector("#salonAnnonce");
                const levelUp_Message = document.querySelector("#message");
                const plugin = document.querySelector("#switch");


                console.log(saveBtn);

                saveBtn.addEventListener("click", () => {


                    console.log("plugin", plugin.checked);
                    console.log("salonsIgnored", salonsIgnored);
                    console.log("rolesIgnored", rolesIgnored);
                    console.log("cmdChannel", cmdChannel.value);
                    console.log("autoChannel", autoChannel.value);

                    console.log("color chosen", hexaColor);
                    const custom = customChannel.classList.contains("active");


                    if (salonsIgnored.length <= 0) {
                        document.getElementsByClassName("multiselect__container")[0].setAttribute("style", "border: 3px solid orange");
                        document.getElementById("warning-salonIgnore-select").style.display = "block";
                        document.getElementById("warning-salonIgnore-select").style.fontSize = "12px";
                        document.getElementById("warning-salonIgnore-select").style.color = "orange";

                    }
                    else {
                        document.getElementsByClassName("multiselect__container")[0].removeAttribute("style");
                        document.getElementById("warning-salonIgnore-select").style.display = "none";
                    }

                    if (rolesIgnored.length <= 0) {
                        document.getElementsByClassName("multiselect__container")[1].setAttribute("style", "border: 3px solid orange");
                        document.getElementById("warning-rolesIgnore-select").style.display = "block";
                        document.getElementById("warning-rolesIgnore-select").style.fontSize = "12px";
                        document.getElementById("warning-rolesIgnore-select").style.color = "orange";

                    }
                    else {

                        document.getElementsByClassName("multiselect__container")[1].removeAttribute("style");
                        document.getElementById("warning-rolesIgnore-select").style.display = "none";
                    }

                    if (cmdChannel.value === "undefined") {

                        document.getElementsByClassName("select-selected")[1].setAttribute("style", "border: 3px solid red");
                        document.getElementById("error-cmd-select").style.display = "block";
                        document.getElementById("error-cmd-select").style.fontSize = "12px";
                        document.getElementById("error-cmd-select").style.color = "red";

                    }
                    else {
                        document.getElementsByClassName("select-selected")[1].removeAttribute("style");
                        document.getElementById("error-cmd-select").style.display = "none";
                    }

                    if (levelUp_Message.value === '') {
                        console.log("error");
                        document.getElementById("message").setAttribute("style", "border: 3px solid red");
                        document.getElementById("error-message").style.display = "block";
                        document.getElementById("error-message").style.fontSize = "12px";
                        document.getElementById("error-message").style.color = "red";
                    }
                    else {
                        document.getElementById("message").removeAttribute("style");
                        document.getElementById("error-message").style.display = "none";
                    }


                    if (custom && autoChannel.value === "undefined") {
                        console.log("error");
                        document.getElementsByClassName("select-selected")[0].setAttribute("style", "border: 3px solid red");
                        document.getElementById("error-auto-select").style.display = "block";
                        document.getElementById("error-auto-select").style.fontSize = "12px";
                        document.getElementById("error-auto-select").style.color = "red";
                    }
                    else {
                        document.getElementsByClassName("select-selected")[0].removeAttribute("style");
                        document.getElementById("error-auto-select").style.display = "none";
                    }


                    if (!custom) {

                        console.log("current")

                        if (levelUp_Message.value !== '' && plugin.checked && cmdChannel.value != 'undefined') {
                            document.getElementById("loader-spinner").previousElementSibling.setAttribute("style", "display: none;");
                            document.getElementById("loader-spinner").style.display = "block";

                            let data = { cmd_channel_ID: cmdChannel.value, message: levelUp_Message.value, plugin: plugin.checked, salonsIgnored, rolesIgnored, defaultColor: hexaColor, isChannelCustom: custom };

                            fetch("leveling", {
                                headers: {
                                    'Accept': 'application/json',
                                    'Content-Type': 'application/json'
                                },
                                method: "POST",
                                body: JSON.stringify(data)
                            }).then((res) => {
                                console.log("done", res);
                                document.getElementById("loader-spinner").style.display = "none";
                                document.getElementById("loader-spinner").previousElementSibling.removeAttribute("style");
                            });
                        }

                        if (!plugin.checked) {

                            openPopUp(applyPopUp)

                            if (levelUp_Message.value === '') {

                                document.getElementById("ignore").style.display = "none";
                            }
                            else {
                                document.getElementById("ignore").removeAttribute("style");
                            }


                        }
                    }
                    else {
                        console.log("custom")
                        if (levelUp_Message.value !== '' && autoChannel.value !== "undefined" && cmdChannel.value != 'undefined' && plugin.checked) {
                            document.getElementById("loader-spinner").previousElementSibling.setAttribute("style", "display: none;");
                            document.getElementById("loader-spinner").style.display = "block";

                            let data = { cmd_channel_ID: cmdChannel.value, autoChannel: autoChannel.value, message: levelUp_Message.value, plugin: plugin.checked, defaultColor: hexaColor, salonsIgnored, rolesIgnored, isChannelCustom: custom };

                            fetch("leveling", {
                                headers: {
                                    'Accept': 'application/json',
                                    'Content-Type': 'application/json'
                                },
                                method: "POST",
                                body: JSON.stringify(data)
                            }).then((res) => {
                                console.log("done", res);
                                document.getElementById("loader-spinner").style.display = "none";
                                document.getElementById("loader-spinner").previousElementSibling.removeAttribute("style");

                            });
                        }

                        if (!plugin.checked) {

                            openPopUp(applyPopUp)

                            if (levelUp_Message.value === '' || autoChannel.value === "undefined") {

                                document.getElementById("ignore").style.display = "none";
                            }
                            else {
                                document.getElementById("ignore").removeAttribute("style");
                            }


                        }
                    }

                });

            </script>

            <script>
                const checkIconPlugins = document.querySelectorAll(".bxs-check-circle");

                console.log("here");
                console.log(checkIconPlugins);
                checkIconPlugins.forEach(pluginsIcon => {

                    switch (pluginsIcon.id) {
                        case 'welcome-plugin':
                            document.getElementById(pluginsIcon.id).style.color = ('<%= pluginsData.welcome %>' === 'true') ? '#089402' : '#646464';
                            break;
                        case 'birthday-plugin':
                            document.getElementById(pluginsIcon.id).style.color = ('<%= pluginsData.birthday %>' === 'true') ? '#089402' : '#646464';

                            break;
                        case 'moderator-plugin':
                            document.getElementById(pluginsIcon.id).style.color = ('<%= pluginsData.moderator %>' === 'true') ? '#089402' : '#646464';

                            break;

                        case 'suggest-plugin':
                            document.getElementById(pluginsIcon.id).style.color = ('<%= pluginsData.suggestion %>' === 'true') ? '#089402' : '#646464';

                            break;

                        case 'channel-plugin':
                            document.getElementById(pluginsIcon.id).style.color = ('<%= pluginsData.channelManager %>' === 'true') ? '#089402' : '#646464';

                            break;

                        case 'leveling-plugin':
                            document.getElementById(pluginsIcon.id).style.color = ('<%= pluginsData.leveling %>' === 'true') ? '#089402' : '#646464';
                            if (!document.getElementById("switch").checked && '<%= pluginsData.leveling %>' === 'true') {
                                console.log('activated');
                                document.getElementById("switch").checked = true;
                            }

                            break;

                        case 'ticket-plugin':
                            document.getElementById(pluginsIcon.id).style.color = ('<%= pluginsData.supportTicket %>' === 'true') ? '#089402' : '#646464';
                            break;

                        case 'stream-plugin':
                            document.getElementById(pluginsIcon.id).style.color = ('<%= pluginsData.stream %>' === 'true') ? '#089402' : '#646464';
                            break;

                        case 'economy-plugin':
                            document.getElementById(pluginsIcon.id).style.color = ('<%= pluginsData.economy %>' === 'true') ? '#089402' : '#646464';
                            break;


                        default:
                            this.style.color = '#646464';
                            break;
                    }
                })

            </script>



            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js "
                integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ "
                crossorigin="anonymous "></script>
            <script src="/js/sidebars.js "></script>




</body>

</html>